Coverage Report by file with details

=================================================================================
=== File: ALSU.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           49        48         1      97.9

================================Statement Details================================

Statement Coverage for file ALSU.sv --

    1                                                import uvm_pkg::*;
    2                                                `include "uvm_macros.svh"
    3                                                
    4                                                module ALSU(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    5                                                parameter INPUT_PRIORITY = "A";
    6                                                parameter FULL_ADDER = "ON";
    7                                                
    8                                                input clk;
    9                                                input signed cin;
    10                                               input rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    11                                               input [2:0] opcode;
    12                                               input signed [2:0] A, B;
    13                                               output reg [15:0] leds;
    14                                               output reg signed [5:0] out;
    15                                               
    16                                               reg  red_op_A_reg, red_op_B_reg, bypass_A_reg, bypass_B_reg, direction_reg, serial_in_reg;
    17                                               reg signed [2:0] A_reg, B_reg;
    18                                               reg signed [1:0] cin_reg;
    19                                               reg [2:0] opcode_reg;
    20                                               
    21                                               wire invalid_red_op, invalid_opcode, invalid;
    22                                               
    23                                               //Invalid handling
    24              1                       4992     assign invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]);///bug:opcode for or=0,xor=1
    25              1                       4605     assign invalid_opcode = (opcode_reg[1] & opcode_reg[2]);// bug: invalid opcodes are 6,7 and should be ored together
    26              1                       2103     assign invalid = invalid_red_op | invalid_opcode;
    27                                               
    28                                               //Registering input signals
    29              1                       5540     always @(posedge clk or posedge rst) begin
    30                                                 if(rst) begin
    31              1                         80          cin_reg <= 0;
    32              1                         80          red_op_B_reg <= 0;
    33              1                         80          red_op_A_reg <= 0;
    34              1                         80          bypass_B_reg <= 0;
    35              1                         80          bypass_A_reg <= 0;
    36              1                         80          direction_reg <= 0;
    37              1                         80          serial_in_reg <= 0;
    38              1                         80          opcode_reg <= 0;
    39              1                         80          A_reg <= 0;
    40              1                         80          B_reg <= 0;
    41                                                 end else begin
    42              1                       5460          cin_reg <= cin;
    43              1                       5460          red_op_B_reg <= red_op_B;
    44              1                       5460          red_op_A_reg <= red_op_A;
    45              1                       5460          bypass_B_reg <= bypass_B;
    46              1                       5460          bypass_A_reg <= bypass_A;
    47              1                       5460          direction_reg <= direction;
    48              1                       5460          serial_in_reg <= serial_in;
    49              1                       5460          opcode_reg <= opcode;
    50              1                       5460          A_reg <= A;
    51              1                       5460          B_reg <= B;
    52                                                 end
    53                                               end
    54                                               
    55                                               //leds output blinking 
    56              1                       5540     always @(posedge clk or posedge rst) begin
    57                                                 if(rst) begin
    58              1                         80          leds <= 0;
    59                                                 end else begin
    60                                                     if (invalid)
    61              1                       1386             leds <= ~leds;
    62                                                     else
    63              1                       4074             leds <= 0;
    64                                                 end
    65                                               end
    66                                               
    67                                               //ALSU output processing
    68              1                       5538     always @(posedge clk or posedge rst) begin
    69                                                 if(rst) begin
    70              1                         78         out <= 0;
    71                                                 end
    72                                                 else begin
    73                                                   if (bypass_A_reg && bypass_B_reg)
    74              1                         10           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    75                                                   else if (bypass_A_reg )
    76              1                        197           out <= A_reg;
    77                                                   else if (bypass_B_reg )
    78              1                        196           out <= B_reg;
    79                                                   else if (invalid )
    80              1                       1273           out <= 0;
    81                                                   else begin
    82                                                       case (opcode_reg)
    83                                                         3'h0: begin //bug: 000 is an or operation
    84                                                           if (red_op_A_reg && red_op_B_reg)
    85              1                         64                   out = (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
    86                                                           else if (red_op_A_reg ) 
    87              1                         56                   out <= |A_reg;
    88                                                           else if (red_op_B_reg )
    89              1                         50                   out <= |B_reg;
    90                                                           else 
    91              1                        665                   out <= A_reg | B_reg;
    92                                                         end
    93                                                         3'h1: begin //bug: 001 is an xor operation
    94                                                           if (red_op_A_reg && red_op_B_reg)
    95              1                         71                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;
    96                                                           else if (red_op_A_reg ) 
    97              1                         49                   out <= ^A_reg;
    98                                                           else if (red_op_B_reg )
    99              1                         39                   out <= ^B_reg;
    100                                                          else 
    101             1                        612                   out <= A_reg ^ B_reg;
    102                                                        end
    103                                                        3'h2:begin // added the effect of cin when the parameter FULL_ADDER is on
    104                                                            if( FULL_ADDER == "ON")
    105             1                        543                      out <= A_reg + B_reg + cin_reg;
    106                                                            else
    107             1                    ***0***                      out <= A_reg + B_reg;
    108                                                        end
    109             1                        537               3'h3: out <= A_reg * B_reg;
    110                                                        3'h4: begin
    111                                                          if (direction_reg)
    112             1                        273                   out <= {out[4:0], serial_in_reg};
    113                                                          else
    114             1                        267                   out <= {serial_in_reg, out[5:1]};
    115                                                        end
    116                                                        3'h5: begin
    117                                                          if (direction_reg)
    118             1                        288                   out <= {out[4:0], out[5]};
    119                                                          else
    120             1                        270                   out <= {out[0], out[5:1]};
    121                                                        end
    122                                                      endcase
    123                                                  end 
    124                                                end
    125                                              end
    126                                              
    127                                              
    128                                              endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        40        35         5      87.5

================================Branch Details================================

Branch Coverage for file ALSU.sv --

------------------------------------IF Branch------------------------------------
    30                                      5540     Count coming in to IF
    30              1                         80       if(rst) begin
    41              1                       5460       end else begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    57                                      5540     Count coming in to IF
    57              1                         80       if(rst) begin
    59              1                       5460       end else begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    60                                      5460     Count coming in to IF
    60              1                       1386           if (invalid)
    62              1                       4074           else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    69                                      5538     Count coming in to IF
    69              1                         78       if(rst) begin
    72              1                       5460       else begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    73                                      5460     Count coming in to IF
    73              1                         10         if (bypass_A_reg && bypass_B_reg)
    75              1                        197         else if (bypass_A_reg )
    77              1                        196         else if (bypass_B_reg )
    79              1                       1273         else if (invalid )
    81              1                       3784         else begin
Branch totals: 5 hits of 5 branches = 100.0%

------------------------------------IF Branch------------------------------------
    74                                        10     Count coming in to IF
    74              1                         10           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    74              2                    ***0***           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------CASE Branch------------------------------------
    82                                      3784     Count coming in to CASE
    83              1                        835               3'h0: begin //bug: 000 is an or operation
    93              1                        771               3'h1: begin //bug: 001 is an xor operation
    103             1                        543               3'h2:begin // added the effect of cin when the parameter FULL_ADDER is on
    109             1                        537               3'h3: out <= A_reg * B_reg;
    110             1                        540               3'h4: begin
    116             1                        558               3'h5: begin
                                         ***0***     All False Count
Branch totals: 6 hits of 7 branches = 85.7%

------------------------------------IF Branch------------------------------------
    84                                       835     Count coming in to IF
    84              1                         64                 if (red_op_A_reg && red_op_B_reg)
    86              1                         56                 else if (red_op_A_reg ) 
    88              1                         50                 else if (red_op_B_reg )
    90              1                        665                 else 
Branch totals: 4 hits of 4 branches = 100.0%

------------------------------------IF Branch------------------------------------
    85                                        64     Count coming in to IF
    85              1                         64                   out = (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
    85              2                    ***0***                   out = (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    94                                       771     Count coming in to IF
    94              1                         71                 if (red_op_A_reg && red_op_B_reg)
    96              1                         49                 else if (red_op_A_reg ) 
    98              1                         39                 else if (red_op_B_reg )
    100             1                        612                 else 
Branch totals: 4 hits of 4 branches = 100.0%

------------------------------------IF Branch------------------------------------
    95                                        71     Count coming in to IF
    95              1                         71                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;
    95              2                    ***0***                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    104                                      543     Count coming in to IF
    104             1                        543                   if( FULL_ADDER == "ON")
    106             1                    ***0***                   else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    111                                      540     Count coming in to IF
    111             1                        273                 if (direction_reg)
    113             1                        267                 else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    117                                      558     Count coming in to IF
    117             1                        288                 if (direction_reg)
    119             1                        270                 else
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              6         6         0     100.0

================================Condition Details================================

Condition Coverage for file ALSU.sv --

----------------Focused Condition View-------------------
Line       73 Item    1  (bypass_A_reg && bypass_B_reg)
Condition totals: 2 of 2 input terms covered = 100.0%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  bypass_A_reg         Y
  bypass_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  bypass_A_reg_0        -                             
  Row   2:          1  bypass_A_reg_1        bypass_B_reg                  
  Row   3:          1  bypass_B_reg_0        bypass_A_reg                  
  Row   4:          1  bypass_B_reg_1        bypass_A_reg                  

----------------Focused Condition View-------------------
Line       84 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.0%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  

----------------Focused Condition View-------------------
Line       94 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.0%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             8         8         0     100.0

================================Expression Details================================

Expression Coverage for file ALSU.sv --

----------------Focused Expression View-----------------
Line       24 Item    1  ((red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]))
Expression totals: 4 of 4 input terms covered = 100.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   red_op_A_reg         Y
   red_op_B_reg         Y
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   2:          1  red_op_A_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   3:          1  red_op_B_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   4:          1  red_op_B_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   5:          1  opcode_reg[1]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   6:          1  opcode_reg[1]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   7:          1  opcode_reg[2]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   8:          1  opcode_reg[2]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])

----------------Focused Expression View-----------------
Line       25 Item    1  (opcode_reg[1] & opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  opcode_reg[1]_0       opcode_reg[2]                 
  Row   2:          1  opcode_reg[1]_1       opcode_reg[2]                 
  Row   3:          1  opcode_reg[2]_0       opcode_reg[1]                 
  Row   4:          1  opcode_reg[2]_1       opcode_reg[1]                 

----------------Focused Expression View-----------------
Line       26 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.0%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                    120       120         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
          8                                    clk           1           1                              100.00 
          9                                    cin           1           1                              100.00 
         10                              serial_in           1           1                              100.00 
         10                                    rst           1           1                              100.00 
         10                               red_op_B           1           1                              100.00 
         10                               red_op_A           1           1                              100.00 
         10                              direction           1           1                              100.00 
         10                               bypass_B           1           1                              100.00 
         10                               bypass_A           1           1                              100.00 
         11                              opcode[2]           1           1                              100.00 
         11                              opcode[1]           1           1                              100.00 
         11                              opcode[0]           1           1                              100.00 
         12                                   B[2]           1           1                              100.00 
         12                                   B[1]           1           1                              100.00 
         12                                   B[0]           1           1                              100.00 
         12                                   A[2]           1           1                              100.00 
         12                                   A[1]           1           1                              100.00 
         12                                   A[0]           1           1                              100.00 
         13                                leds[9]           1           1                              100.00 
         13                                leds[8]           1           1                              100.00 
         13                                leds[7]           1           1                              100.00 
         13                                leds[6]           1           1                              100.00 
         13                                leds[5]           1           1                              100.00 
         13                                leds[4]           1           1                              100.00 
         13                                leds[3]           1           1                              100.00 
         13                                leds[2]           1           1                              100.00 
         13                                leds[1]           1           1                              100.00 
         13                               leds[15]           1           1                              100.00 
         13                               leds[14]           1           1                              100.00 
         13                               leds[13]           1           1                              100.00 
         13                               leds[12]           1           1                              100.00 
         13                               leds[11]           1           1                              100.00 
         13                               leds[10]           1           1                              100.00 
         13                                leds[0]           1           1                              100.00 
         14                                 out[5]           1           1                              100.00 
         14                                 out[4]           1           1                              100.00 
         14                                 out[3]           1           1                              100.00 
         14                                 out[2]           1           1                              100.00 
         14                                 out[1]           1           1                              100.00 
         14                                 out[0]           1           1                              100.00 
         16                          serial_in_reg           1           1                              100.00 
         16                           red_op_B_reg           1           1                              100.00 
         16                           red_op_A_reg           1           1                              100.00 
         16                          direction_reg           1           1                              100.00 
         16                           bypass_B_reg           1           1                              100.00 
         16                           bypass_A_reg           1           1                              100.00 
         17                               B_reg[2]           1           1                              100.00 
         17                               B_reg[1]           1           1                              100.00 
         17                               B_reg[0]           1           1                              100.00 
         17                               A_reg[2]           1           1                              100.00 
         17                               A_reg[1]           1           1                              100.00 
         17                               A_reg[0]           1           1                              100.00 
         18                             cin_reg[1]           1           1                              100.00 
         18                             cin_reg[0]           1           1                              100.00 
         19                          opcode_reg[2]           1           1                              100.00 
         19                          opcode_reg[1]           1           1                              100.00 
         19                          opcode_reg[0]           1           1                              100.00 
         21                         invalid_red_op           1           1                              100.00 
         21                         invalid_opcode           1           1                              100.00 
         21                                invalid           1           1                              100.00 

Total Node Count     =         60 
Toggled Node Count   =         60 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (120 of 120 bins)

=================================================================================
=== File: ALSU_agent.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           14        11         3      78.5

================================Statement Details================================

Statement Coverage for file ALSU_agent.sv --

    1                                                package ALSU_agent_pck;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                import ALSU_sequencer_pck::*;
    5                                                import ALSU_seq_item_pck::*;
    6                                                import ALSU_driver_pck::*;
    7                                                import ALSU_monitor_pck::*;
    8                                                import ALSU_config_pck::*;
    9                                                `include "uvm_macros.svh"
    10                                               
    11                                               class ALSU_agent extends uvm_agent;
    12              1                    ***0***     `uvm_component_utils(ALSU_agent)
    12              2                    ***0***     
    12              3                          2     
    13                                               ALSU_sequencer sqr;
    14                                               ALSU_driver drv;
    15                                               ALSU_monitor mon;
    16                                               ALSU_config ALSU_cfg;
    17                                               uvm_analysis_port #(ALSU_seq_item) agt_ap;
    18                                               
    19                                               function new (string name = "ALSU_agent",uvm_component parent =null);
    20              1                          1       super.new(name,parent);
    21                                               endfunction
    22                                               
    23                                               function void build_phase (uvm_phase phase);
    24              1                          1      super.build_phase(phase);
    25                                                if(!uvm_config_db #(ALSU_config)::get(this,"","CFG",ALSU_cfg)) begin
    26              1                    ***0***        `uvm_fatal("bulid_phase","Driver - Unable to get configuration object") ;end
    27                                               
    28              1                          1      drv = ALSU_driver::type_id::create("drv",this);
    29              1                          1      sqr = ALSU_sequencer::type_id::create("sqr",this);
    30              1                          1      mon = ALSU_monitor::type_id::create("mon",this);
    31              1                          1      agt_ap=new("agt_ap",this);
    32                                               endfunction
    33                                               
    34                                               function void connect_phase (uvm_phase phase);
    35              1                          1      drv.ALSU_vif = ALSU_cfg.ALSU_vif ;
    36              1                          1      mon.ALSU_vif = ALSU_cfg.ALSU_vif ;
    37              1                          1      drv.seq_item_port.connect(sqr.seq_item_export);
    38              1                          1      mon.mon_ap.connect(agt_ap);
    39                                               endfunction
    40                                               
    41                                               endclass
    42                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         1         3      25.0

================================Branch Details================================

Branch Coverage for file ALSU_agent.sv --

------------------------------------IF Branch------------------------------------
    25                                         1     Count coming in to IF
    25              1                    ***0***      if(!uvm_config_db #(ALSU_config)::get(this,"","CFG",ALSU_cfg)) begin
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    26                                   ***0***     Count coming in to IF
    26              1                    ***0***        `uvm_fatal("bulid_phase","Driver - Unable to get configuration object") ;end
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_agent.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_assertions.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for file ALSU_assertions.sv --

    1                                                import ALSU_seq_item_pck::*;
    2                                                module ALSU_assertions(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    3                                                parameter INPUT_PRIORITY = "A";
    4                                                parameter FULL_ADDER = "ON";
    5                                                input clk, rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    6                                                input [2:0] opcode;
    7                                                input signed [2:0] A, B; // A,B signed inputs
    8                                                input signed cin;
    9                                                input reg [15:0] leds;
    10                                               input reg signed [5:0] out;  // out signed output.
    11                                               
    12                                               // Valid Casses // 
    13                                               property BYPASS_A;
    14                                               @(posedge clk ) disable iff(rst)  ( bypass_A && INPUT_PRIORITY == "A") |=> ##1 ( (out == ( $past(A,2) )) ) ;  
    15                                               endproperty
    16                                               
    17                                               property BYPASS_B;
    18                                               @(posedge clk ) disable iff(rst) (!bypass_A && bypass_B) |=> ##1 ( (out == ( $past(B,2) ) )) ;  
    19                                               endproperty
    20                                               
    21                                               property Full_Adder ;
    22                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == ADD && FULL_ADDER == "ON") |=> ##1 ( (out == ( $past(A,2)+$past(B,2) + $past(cin,2) ) ) && ( leds == 16'b0 ) ) ;  
    23                                               endproperty
    24                                               
    25                                               property Multiplication;
    26                                               @(posedge clk)  disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B)  (opcode == MULT) |=> ##1 ( out == ( $past(A,2)*$past(B,2) ) &&( leds == 16'b0 ) );  
    27                                               endproperty
    28                                               
    29                                               property OR_A;
    30                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == OR && red_op_A) |=> ##1 ( out == ( |$past(A,2) ) && ( leds == 16'b0 ) ); 
    31                                               endproperty
    32                                               
    33                                               property OR_B;
    34                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == OR && !red_op_A && red_op_B) |=> ##1 ( out == ( |$past(B,2) ) && ( leds == 16'b0 ) ); 
    35                                               endproperty
    36                                               
    37                                               property A_OR_B;
    38                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == OR && !red_op_A && !red_op_B) |=> ##1 ( out == ($past(A,2) |$past(B,2) ) && ( leds == 16'b0 ) ); 
    39                                               endproperty
    40                                               
    41                                               
    42                                               property XOR_A;
    43                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == XOR && red_op_A) |=> ##1 ( out == ( ^$past(A,2) ) && ( leds == 16'b0 ) ); 
    44                                               endproperty
    45                                               
    46                                               property XOR_B;
    47                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == XOR && !red_op_A && red_op_B) |=> ##1 ( out == ( ^$past(B,2) ) && ( leds == 16'b0 ) ); 
    48                                               endproperty
    49                                               
    50                                               property A_XOR_B;
    51                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == XOR && !red_op_A && !red_op_B) |=> ##1 ( out == ($past(A,2) ^ $past(B,2) ) && ( leds == 16'b0 ) ); 
    52                                               endproperty
    53                                               
    54                                               property SHIFT_LEFT;
    55                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == SHIFT && direction == 1'b1) |=> ##1 ( ( out == {$past(out[4:0]),$past(serial_in,2)} ) && ( leds == 16'b0 ) ); 
    56                                               endproperty
    57                                               
    58                                               property SHIFT_RIGHT;
    59                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == SHIFT && direction == 1'b0) |=> ##1 ( ( out == {$past(serial_in,2),$past(out[5:1])} ) && ( leds == 16'b0 ) ); 
    60                                               endproperty
    61                                               
    62                                               property ROTATE_LEFT;
    63                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == ROTATE && direction == 1'b1) |=> ##1 ( ( out == {$past(out[4:0]),$past(out[5])} ) && ( leds == 16'b0 ) ); 
    64                                               endproperty
    65                                               
    66                                               property ROTATE_RIGHT;
    67                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == ROTATE && direction == 1'b0) |=> ##1 ( ( out == {$past(out[0]),$past(out[5:1])} ) && ( leds == 16'b0 ) ); 
    68                                               endproperty
    69                                               
    70                                               // Invalid Cases //
    71                                               property INVALID_1;
    72                                               @(posedge clk ) disable iff(rst || bypass_A || bypass_B) (opcode == INVALID_6 || opcode == INVALID_7) |=> ##1 (out == 6'b0 );
    73                                               endproperty
    74                                               
    75                                               property INVALID_2;
    76                                               @(posedge clk ) disable iff(rst || bypass_A || bypass_B) ( (opcode != OR) && (opcode != XOR) && (red_op_A || red_op_B) ) |=> ##1 (out == 6'b0);
    77                                               endproperty
    78                                               
    79                                               property INVALID_1_leds;
    80                                               @(posedge clk ) disable iff(rst || bypass_A || bypass_B) (opcode == INVALID_6 || opcode == INVALID_7) |=> ##1 (leds == ~$past(leds));
    81                                               endproperty
    82                                               
    83                                               property INVALID_2_leds;
    84                                               @(posedge clk ) disable iff(rst || bypass_A || bypass_B) ( (opcode != OR) && (opcode != XOR) && (red_op_A || red_op_B) ) |=> ##1 (leds == ~$past(leds));
    85                                               endproperty
    86                                               
    87                                               
    88                                               bypass_a_a:assert property(BYPASS_A);
    89                                               bypass_a_c:cover property(BYPASS_A);
    90                                               
    91                                               bypass_b_a:assert property(BYPASS_B);
    92                                               bypass_b_c:cover property(BYPASS_B);
    93                                               
    94                                               mult_a:assert property (Multiplication);
    95                                               mult_c:cover property (Multiplication);
    96                                               
    97                                               add_a:assert property (Full_Adder);
    98                                               add_c:cover property (Full_Adder);
    99                                               
    100                                              or_a_a:assert property (OR_A);
    101                                              or_a_c:cover property (OR_A);
    102                                              
    103                                              or_b_a:assert property (OR_B);
    104                                              or_b_c:cover property (OR_B);
    105                                              
    106                                              a_or_b_a:assert property (A_OR_B);
    107                                              a_or_b_c:cover property (A_OR_B);
    108                                              
    109                                              
    110                                              xor_a_a:assert property (XOR_A);
    111                                              xor_a_c:cover property (XOR_A);
    112                                              
    113                                              xor_b_a:assert property (XOR_B);
    114                                              xor_b_c:cover property (XOR_B);
    115                                              
    116                                              a_xor_b_a:assert property (A_XOR_B);
    117                                              a_xor_b_c:cover property (A_XOR_B);
    118                                              
    119                                              shift_right_a:assert property (SHIFT_RIGHT);
    120                                              shift_right_c:cover property (SHIFT_RIGHT);
    121                                              
    122                                              shift_left_a:assert property (SHIFT_LEFT);
    123                                              shift_left_c:cover property (SHIFT_LEFT);
    124                                              
    125                                              rotate_right_a:assert property (ROTATE_RIGHT);
    126                                              rotate_right_c:cover property (ROTATE_RIGHT);
    127                                              
    128                                              rotate_left_a:assert property (ROTATE_LEFT);
    129                                              rotate_left_c:cover property (ROTATE_LEFT);
    130                                              
    131                                              invalid_1_a:assert property(INVALID_1);
    132                                              invalid_1_c:cover property(INVALID_1);
    133                                              
    134                                              invalid_2_a:assert property(INVALID_2);
    135                                              invalid_2_c:cover property(INVALID_2);
    136                                              
    137                                              invalid_1_leds_a:assert property(INVALID_1_leds);
    138                                              invalid_1_leds_c:cover property(INVALID_1_leds);
    139                                              
    140                                              invalid_2_leds_a:assert property(INVALID_2_leds);
    141                                              invalid_2_leds_c:cover property(INVALID_2_leds);
    142                                              
    143                                              
    144                                              
    145                                              
    146             1                       5030     always_comb begin : reset_outputs
    147                                                  if(rst)
    148                                                  reset_a:assert final (out == 0 && leds ==0 );
    149                                              end
    150                                              
    151                                              
    152                                              endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         2         2         0     100.0

================================Branch Details================================

Branch Coverage for file ALSU_assertions.sv --

------------------------------------IF Branch------------------------------------
    147                                     5030     Count coming in to IF
    147             1                         75         if(rst)
                                            4955     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                     80        80         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_assertions.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
          5                              serial_in           1           1                              100.00 
          5                                    rst           1           1                              100.00 
          5                               red_op_B           1           1                              100.00 
          5                               red_op_A           1           1                              100.00 
          5                              direction           1           1                              100.00 
          5                                    clk           1           1                              100.00 
          5                               bypass_B           1           1                              100.00 
          5                               bypass_A           1           1                              100.00 
          6                              opcode[2]           1           1                              100.00 
          6                              opcode[1]           1           1                              100.00 
          6                              opcode[0]           1           1                              100.00 
          7                                   B[2]           1           1                              100.00 
          7                                   B[1]           1           1                              100.00 
          7                                   B[0]           1           1                              100.00 
          7                                   A[2]           1           1                              100.00 
          7                                   A[1]           1           1                              100.00 
          7                                   A[0]           1           1                              100.00 
          8                                    cin           1           1                              100.00 
          9                                leds[9]           1           1                              100.00 
          9                                leds[8]           1           1                              100.00 
          9                                leds[7]           1           1                              100.00 
          9                                leds[6]           1           1                              100.00 
          9                                leds[5]           1           1                              100.00 
          9                                leds[4]           1           1                              100.00 
          9                                leds[3]           1           1                              100.00 
          9                                leds[2]           1           1                              100.00 
          9                                leds[1]           1           1                              100.00 
          9                               leds[15]           1           1                              100.00 
          9                               leds[14]           1           1                              100.00 
          9                               leds[13]           1           1                              100.00 
          9                               leds[12]           1           1                              100.00 
          9                               leds[11]           1           1                              100.00 
          9                               leds[10]           1           1                              100.00 
          9                                leds[0]           1           1                              100.00 
         10                                 out[5]           1           1                              100.00 
         10                                 out[4]           1           1                              100.00 
         10                                 out[3]           1           1                              100.00 
         10                                 out[2]           1           1                              100.00 
         10                                 out[1]           1           1                              100.00 
         10                                 out[0]           1           1                              100.00 

Total Node Count     =         40 
Toggled Node Count   =         40 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (80 of 80 bins)

=================================================================================
=== File: ALSU_config.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           11         1        10       9.0

================================Statement Details================================

Statement Coverage for file ALSU_config.sv --

    1                                                package ALSU_config_pck;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                class ALSU_config extends uvm_object;
    6                                                
    7               1                    ***0***      `uvm_object_utils(ALSU_config)
    7               2                    ***0***     
    7               3                    ***0***     
    7               4                    ***0***     
    7               5                    ***0***     
    7               6                    ***0***     
    7               7                    ***0***     
    7               8                    ***0***     
    7               9                    ***0***     
    7              10                    ***0***     
    8                                                virtual ALSU_if ALSU_vif;
    9                                                function new (string name = "ALSU_config");
    10              1                          1       super.new(name);
    11                                               endfunction
    12                                               endclass
    13                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         0        10       0.0

================================Branch Details================================

Branch Coverage for file ALSU_config.sv --

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               1                    ***0***      `uvm_object_utils(ALSU_config)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               2                    ***0***      `uvm_object_utils(ALSU_config)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               3                    ***0***      `uvm_object_utils(ALSU_config)
    7               4                    ***0***      `uvm_object_utils(ALSU_config)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               5                    ***0***      `uvm_object_utils(ALSU_config)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               6                    ***0***      `uvm_object_utils(ALSU_config)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_config.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_coverage_pck.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           14        12         2      85.7

================================Statement Details================================

Statement Coverage for file ALSU_coverage_pck.sv --

    1                                                package ALSU_coverage_pck;
    2                                                import ALSU_seq_item_pck::*;
    3                                                import ALSU_config_pck::*;
    4                                                import uvm_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                
    7                                                class ALSU_coverage extends uvm_component;
    8               1                    ***0***      `uvm_component_utils(ALSU_coverage)
    8               2                    ***0***     
    8               3                          2     
    9                                                 uvm_analysis_export #(ALSU_seq_item) cov_export;
    10                                                uvm_tlm_analysis_fifo #(ALSU_seq_item) cov_fifo;
    11                                                ALSU_seq_item seq_item_cov;
    12                                               
    13                                               covergroup cvr_grp ;
    14                                               A_cp1 : coverpoint seq_item_cov.A
    15                                               {
    16                                                bins A_data_0 = {0};
    17                                                bins A_data_max = {seq_item_cov.MAXPOS};
    18                                                bins A_data_min = {seq_item_cov.MAXNEG};
    19                                                bins others = default;
    20                                               }
    21                                               A_cp2 : coverpoint seq_item_cov.A iff (seq_item_cov.red_op_A) {bins A_data_walkingones [] = {1,2,4};}
    22                                               
    23                                               B_cp1 : coverpoint seq_item_cov.B
    24                                               {
    25                                                bins B_data_0 = {0};
    26                                                bins B_data_max = {seq_item_cov.MAXPOS};
    27                                                bins B_data_min = {seq_item_cov.MAXNEG};
    28                                                bins others = default;
    29                                               
    30                                               }
    31                                               B_cp2 : coverpoint seq_item_cov.B iff (seq_item_cov.red_op_B && !seq_item_cov.red_op_A) {bins B_data_walkingones [] = {1,2,4};}
    32                                               ALU_cp : coverpoint seq_item_cov.opcode
    33                                               {
    34                                                bins trans =(OR=>XOR=>ADD=>MULT=>SHIFT=>ROTATE);
    35                                                bins shift[] = {SHIFT,ROTATE};
    36                                                bins arith[] = {OR,XOR};
    37                                                bins bitwise[] = {MULT,ADD};
    38                                                //illegal_bins invalid = {INVALID_6,INVALID_7};
    39                                               }
    40                                               cin_cp : coverpoint seq_item_cov.cin
    41                                               {
    42                                                bins cin_0 = {0};
    43                                                 bins cin_1 = {1};
    44                                               
    45                                               }
    46                                               serial_in_cp : coverpoint seq_item_cov.serial_in
    47                                               {
    48                                                bins serial_in_0 = {0};
    49                                                 bins serial_in_1 = {1};
    50                                               
    51                                               }
    52                                               direction_cp : coverpoint seq_item_cov.direction
    53                                               {
    54                                                bins direction_0 = {0};
    55                                                 bins direction_1 = {1};
    56                                               
    57                                               }
    58                                               
    59                                               opcode_B: cross ALU_cp,B_cp1
    60                                               {
    61                                                bins op_b1 =binsof(ALU_cp.bitwise)&&binsof(B_cp1.B_data_0);
    62                                                bins op_b2 =binsof(ALU_cp.bitwise)&&binsof(B_cp1.B_data_max);
    63                                                bins op_b3 =binsof(ALU_cp.bitwise)&&binsof(B_cp1.B_data_min);
    64                                                option.cross_auto_bin_max=0;
    65                                               }
    66                                               opcode_A: cross ALU_cp,A_cp1
    67                                               {
    68                                                bins op_a1 =binsof(ALU_cp.bitwise)&&binsof(A_cp1.A_data_0);
    69                                                bins op_a2 =binsof(ALU_cp.bitwise)&&binsof(A_cp1.A_data_max);
    70                                                bins op_a3 =binsof(ALU_cp.bitwise)&&binsof(A_cp1.A_data_min);
    71                                                option.cross_auto_bin_max=0;
    72                                               }
    73                                               opcode_cin: cross ALU_cp,cin_cp
    74                                               {
    75                                                bins op_cin1 =binsof(ALU_cp.bitwise)&&binsof(cin_cp.cin_0);
    76                                                bins op_cin2 =binsof(ALU_cp.bitwise)&&binsof(cin_cp.cin_1);
    77                                                option.cross_auto_bin_max=0;
    78                                               }
    79                                               opcode_serial: cross ALU_cp,serial_in_cp
    80                                               {
    81                                                bins op_cin1 =binsof(ALU_cp.shift)&&binsof(serial_in_cp.serial_in_0);
    82                                                bins op_cin2 =binsof(ALU_cp.shift)&&binsof(serial_in_cp.serial_in_1);
    83                                                option.cross_auto_bin_max=0;
    84                                               }
    85                                               opcode_direction: cross ALU_cp,direction_cp
    86                                               {
    87                                                bins op_dir1 =binsof(ALU_cp.shift)&&binsof(direction_cp.direction_0);
    88                                                bins op_dir2 =binsof(ALU_cp.shift)&&binsof(direction_cp.direction_1);
    89                                                option.cross_auto_bin_max=0;
    90                                               }
    91                                               /*reda: cross ALU_cp,A_cp2,seq_item_cov.B
    92                                               {
    93                                                bins op_redA =binsof(ALU_cp.arith)&&binsof(A_cp2)&&binsof(seq_item_cov.B)intersect {0};
    94                                                option.cross_auto_bin_max=0;
    95                                               }
    96                                               redb: cross ALU_cp,B_cp2,seq_item_cov.A
    97                                               {
    98                                                bins op_redB =binsof(ALU_cp.arith)&&binsof(B_cp2)&&binsof(seq_item_cov.A)intersect {0};
    99                                                option.cross_auto_bin_max=0;
    100                                              }*/
    101                                              /*reduction_invalid:coverpoint seq_item_cov.opcode iff(seq_item_cov.red_op_A ||seq_item_cov.red_op_B)
    102                                              {
    103                                               illegal_bins reduction_invalid []={[ADD:INVALID_7]};
    104                                              }*/
    105                                              endgroup
    106                                              
    107                                               function new (string name = "ALSU_coverage",uvm_component parent =null);
    108             1                          1       super.new(name,parent);
    109             1                          1       cvr_grp=new();
    110                                              endfunction
    111                                              
    112                                              function void build_phase (uvm_phase phase);
    113             1                          1      super.build_phase(phase);
    114             1                          1      cov_export=new("cov_export",this);
    115             1                          1      cov_fifo=new("cov_fifo",this);
    116                                              endfunction
    117                                              
    118                                              function void connect_phase (uvm_phase phase);
    119             1                          1      super.connect_phase(phase);
    120             1                          1      cov_export.connect(cov_fifo.analysis_export);
    121                                              endfunction
    122                                              
    123                                              
    124                                              task run_phase(uvm_phase phase);
    125             1                          1      super.run_phase(phase);
    126             1                          1      forever begin
    127             1                       5502         cov_fifo.get(seq_item_cov);
    128             1                       5501         cvr_grp.sample();
    129                                               end
    130                                              endtask
    131                                              
    132                                              endclass 
    133                                              endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_coverage_pck.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_driver.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           24        21         3      87.5

================================Statement Details================================

Statement Coverage for file ALSU_driver.sv --

    1                                                package ALSU_driver_pck;
    2                                                import ALSU_seq_item_pck::*;
    3                                                import ALSU_config_pck::*;
    4                                                import uvm_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                
    7                                                class ALSU_driver extends uvm_driver #(ALSU_seq_item);
    8               1                    ***0***      `uvm_component_utils(ALSU_driver)
    8               2                    ***0***     
    8               3                          2     
    9                                                virtual ALSU_if ALSU_vif;
    10                                               ALSU_seq_item stim_seq_item;
    11                                               
    12                                               function new (string name = "ALSU_driver",uvm_component parent =null);
    13              1                          1       super.new(name,parent);
    14                                               endfunction
    15                                               
    16                                               task run_phase(uvm_phase phase);
    17              1                          1     super.run_phase(phase);
    18              1                          1      forever begin 
    19              1                       5502        stim_seq_item = ALSU_seq_item::type_id::create("stim_seq_item",this);
    20              1                       5502        seq_item_port.get_next_item(stim_seq_item);
    21              1                       5501        ALSU_vif.rst=stim_seq_item.rst;
    22              1                       5501        ALSU_vif.A=stim_seq_item.A;
    23              1                       5501        ALSU_vif.B=stim_seq_item.B;
    24              1                       5501        ALSU_vif.opcode=stim_seq_item.opcode;
    25              1                       5501        ALSU_vif.cin=stim_seq_item.cin;
    26              1                       5501        ALSU_vif.red_op_A=stim_seq_item.red_op_A;
    27              1                       5501        ALSU_vif.red_op_B=stim_seq_item.red_op_B;
    28              1                       5501        ALSU_vif.bypass_A=stim_seq_item.bypass_A;
    29              1                       5501        ALSU_vif.bypass_B=stim_seq_item.bypass_B;
    30              1                       5501        ALSU_vif.direction=stim_seq_item.direction;
    31              1                       5501        ALSU_vif.serial_in=stim_seq_item.serial_in;
    32              1                       5501        ALSU_vif.leds=stim_seq_item.leds;
    33              1                       5501        ALSU_vif.out=stim_seq_item.out;
    34                                               
    35              1                       5501        @(negedge ALSU_vif.clk );
    36              1                       5501        seq_item_port.item_done();
    37              1                    ***0***       `uvm_info("run_phase",stim_seq_item.convert2string_stimulus (),UVM_HIGH)
    38                                                end
    39                                                 
    40                                               endtask
    41                                                
    42                                               
    43                                               endclass
    44                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         2         1         1      50.0

================================Branch Details================================

Branch Coverage for file ALSU_driver.sv --

------------------------------------IF Branch------------------------------------
    37                                      5501     Count coming in to IF
    37              1                    ***0***       `uvm_info("run_phase",stim_seq_item.convert2string_stimulus (),UVM_HIGH)
                                            5501     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_driver.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_env.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            8         6         2      75.0

================================Statement Details================================

Statement Coverage for file ALSU_env.sv --

    1                                                package ALSU_env_pck;
    2                                                import  ALSU_agent_pck::*;
    3                                                import  ALSU_coverage_pck::*;
    4                                                import uvm_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                class ALSU_env extends uvm_env;
    7               1                    ***0***     `uvm_component_utils(ALSU_env)
    7               2                    ***0***     
    7               3                          2     
    8                                                 ALSU_agent agt ;
    9                                                 ALSU_coverage cov;
    10                                               function new (string name = "ALSU_env",uvm_component parent =null);
    11              1                          1       super.new(name,parent);
    12                                               endfunction
    13                                               
    14                                               function void build_phase (uvm_phase phase);
    15              1                          1      super.build_phase(phase);
    16              1                          1      agt = ALSU_agent::type_id::create("agt",this);
    17              1                          1      cov = ALSU_coverage::type_id::create("cov",this);
    18                                               endfunction
    19                                               
    20                                               function void connect_phase (uvm_phase phase);
    21              1                          1      agt.agt_ap.connect(cov.cov_export);
    22                                               endfunction
    23                                               endclass
    24                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_env.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_if.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            0         0         0     100.0
Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                     82        82         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_if.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
          5                                    clk           1           1                              100.00 
          8                                    cin           1           1                              100.00 
          9                              serial_in           1           1                              100.00 
          9                                    rst           1           1                              100.00 
          9                               red_op_B           1           1                              100.00 
          9                               red_op_A           1           1                              100.00 
          9                              direction           1           1                              100.00 
          9                               bypass_B           1           1                              100.00 
          9                               bypass_A           1           1                              100.00 
         10                                 opcode               ENUM type       Value       Count 
                                                                        OR          15      100.00 
                                                                       XOR          12      100.00 
                                                                       ADD          17      100.00 
                                                                      MULT          19      100.00 
                                                                     SHIFT          16      100.00 
                                                                    ROTATE          18      100.00 
                                                                 INVALID_6           1      100.00 
                                                                 INVALID_7           2      100.00 
         11                                   B[2]           1           1                              100.00 
         11                                   B[1]           1           1                              100.00 
         11                                   B[0]           1           1                              100.00 
         11                                   A[2]           1           1                              100.00 
         11                                   A[1]           1           1                              100.00 
         11                                   A[0]           1           1                              100.00 
         12                                leds[9]           1           1                              100.00 
         12                                leds[8]           1           1                              100.00 
         12                                leds[7]           1           1                              100.00 
         12                                leds[6]           1           1                              100.00 
         12                                leds[5]           1           1                              100.00 
         12                                leds[4]           1           1                              100.00 
         12                                leds[3]           1           1                              100.00 
         12                                leds[2]           1           1                              100.00 
         12                                leds[1]           1           1                              100.00 
         12                               leds[15]           1           1                              100.00 
         12                               leds[14]           1           1                              100.00 
         12                               leds[13]           1           1                              100.00 
         12                               leds[12]           1           1                              100.00 
         12                               leds[11]           1           1                              100.00 
         12                               leds[10]           1           1                              100.00 
         12                                leds[0]           1           1                              100.00 
         13                                 out[5]           1           1                              100.00 
         13                                 out[4]           1           1                              100.00 
         13                                 out[3]           1           1                              100.00 
         13                                 out[2]           1           1                              100.00 
         13                                 out[1]           1           1                              100.00 
         13                                 out[0]           1           1                              100.00 

Total Node Count     =         45 
Toggled Node Count   =         45 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (82 of 82 bins)

=================================================================================
=== File: ALSU_main_sequence.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           48        32        16      66.6

================================Statement Details================================

Statement Coverage for file ALSU_main_sequence.sv --

    1                                                package ALSU_main_sequence_pck ;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                import ALSU_seq_item_pck::*;
    5                                                class ALSU_main_sequence_1 extends uvm_sequence #(ALSU_seq_item);
    6               1                    ***0***      `uvm_object_utils(ALSU_main_sequence_1)
    6               2                    ***0***     
    6               3                    ***0***     
    6               4                    ***0***     
    6               5                    ***0***     
    6               6                          1     
    6               7                    ***0***     
    6               8                    ***0***     
    6               9                          1     
    6              10                    ***0***     
    7                                                ALSU_seq_item seq_item;
    8                                                
    9                                                function new (string name = "ALSU_main_sequence_1");
    10              1                          1       super.new(name);
    11                                               endfunction
    12                                               
    13                                               task body;
    14              1                       5000     repeat(5000) begin
    15              1                       5000     seq_item = ALSU_seq_item::type_id::create("seq_item");
    16              1                       5000     start_item(seq_item);
    17              1                       5000      seq_item.constraint_mode(0);
    18              1                       5000      seq_item.ALSU_Cons.constraint_mode(1);
    19                                                assert(seq_item.randomize());
    20              1                       5000     finish_item(seq_item); end
    21                                               
    22                                               endtask
    23                                               endclass
    24                                               
    25                                               class ALSU_main_sequence_2 extends uvm_sequence #(ALSU_seq_item);
    26              1                    ***0***      `uvm_object_utils(ALSU_main_sequence_2)
    26              2                    ***0***     
    26              3                    ***0***     
    26              4                    ***0***     
    26              5                    ***0***     
    26              6                          1     
    26              7                    ***0***     
    26              8                    ***0***     
    26              9                          1     
    26             10                    ***0***     
    27                                               ALSU_seq_item seq_item;
    28                                               
    29                                               function new (string name = "ALSU_main_sequence_2");
    30              1                          1       super.new(name);
    31                                               endfunction
    32                                               
    33                                               task body;
    34                                               
    35              1                          1      for(int i=0;i<500;i++) begin
    35              2                        500     
    36              1                        500       seq_item = ALSU_seq_item::type_id::create("seq_item");
    37              1                        500       start_item(seq_item);
    38              1                        500         seq_item.constraint_mode(0);
    39              1                        500         seq_item.extra.constraint_mode(1);
    40              1                        500         seq_item.rst=0;seq_item.bypass_A=0;seq_item.bypass_B=0;seq_item.red_op_A=0;seq_item.red_op_B=0;
    40              2                        500     
    40              3                        500     
    40              4                        500     
    40              5                        500     
    41              1                        500         seq_item.rst.rand_mode(0);seq_item.bypass_A.rand_mode(0);seq_item.bypass_B.rand_mode(0);seq_item.red_op_A.rand_mode(0);
    41              2                        500     
    41              3                        500     
    41              4                        500     
    42              1                        500         seq_item.red_op_B.rand_mode(0);
    43                                                       assert(seq_item.randomize());
    44              1                          1             if(i==28)seq_item.arr.sort();
    45              1                       3500             foreach(seq_item.arr[j])begin
    46              1                       3000                 seq_item.opcode=seq_item.arr[j];
    47                                               
    48                                                       end
    49                                                   
    50              1                        500      finish_item(seq_item);
    51                                               end
    52                                               endtask
    53                                               endclass
    54                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        22         6        16      27.2

================================Branch Details================================

Branch Coverage for file ALSU_main_sequence.sv --

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               1                    ***0***      `uvm_object_utils(ALSU_main_sequence_1)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               2                    ***0***      `uvm_object_utils(ALSU_main_sequence_1)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               3                    ***0***      `uvm_object_utils(ALSU_main_sequence_1)
    6               4                    ***0***      `uvm_object_utils(ALSU_main_sequence_1)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               5                    ***0***      `uvm_object_utils(ALSU_main_sequence_1)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               6                    ***0***      `uvm_object_utils(ALSU_main_sequence_1)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    26                                   ***0***     Count coming in to IF
    26              1                    ***0***      `uvm_object_utils(ALSU_main_sequence_2)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    26                                         1     Count coming in to IF
    26              2                    ***0***      `uvm_object_utils(ALSU_main_sequence_2)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    26                                   ***0***     Count coming in to IF
    26              3                    ***0***      `uvm_object_utils(ALSU_main_sequence_2)
    26              4                    ***0***      `uvm_object_utils(ALSU_main_sequence_2)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    26                                         1     Count coming in to IF
    26              5                    ***0***      `uvm_object_utils(ALSU_main_sequence_2)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    26                                   ***0***     Count coming in to IF
    26              6                    ***0***      `uvm_object_utils(ALSU_main_sequence_2)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    44                                       500     Count coming in to IF
    44              1                          1             if(i==28)seq_item.arr.sort();
                                             499     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_main_sequence.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_monitor.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           25        22         3      88.0

================================Statement Details================================

Statement Coverage for file ALSU_monitor.sv --

    1                                                package ALSU_monitor_pck ;
    2                                                import uvm_pkg::*;
    3                                                import ALSU_seq_item_pck::*;
    4                                                `include "uvm_macros.svh"
    5                                                
    6                                                class ALSU_monitor extends uvm_monitor;
    7               1                    ***0***     `uvm_component_utils(ALSU_monitor)
    7               2                    ***0***     
    7               3                          2     
    8                                                
    9                                                 virtual ALSU_if ALSU_vif;
    10                                               ALSU_seq_item rsp_seq_item;
    11                                               uvm_analysis_port #(ALSU_seq_item) mon_ap;
    12                                               
    13                                               function new (string name = "ALSU_monitor",uvm_component parent =null);
    14              1                          1       super.new(name,parent);
    15                                               endfunction
    16                                               
    17                                               function void build_phase (uvm_phase phase);
    18              1                          1      super.build_phase(phase);
    19              1                          1     mon_ap =new("mon_ap",this);
    20                                               endfunction
    21                                               
    22                                               task run_phase(uvm_phase phase);
    23              1                          1     super.run_phase(phase);
    24              1                          1     forever begin
    25              1                       5502     rsp_seq_item = ALSU_seq_item::type_id::create("rsp_seq_item",this);
    26                                               
    27              1                       5502     @(negedge ALSU_vif.clk);
    28              1                       5501     rsp_seq_item.rst=ALSU_vif.rst;
    29              1                       5501     rsp_seq_item.cin=ALSU_vif.cin;
    30              1                       5501     rsp_seq_item.A=ALSU_vif.A;
    31              1                       5501     rsp_seq_item.B=ALSU_vif.B;
    32              1                       5501     rsp_seq_item.opcode=opcode_e'(ALSU_vif.opcode);
    33              1                       5501     rsp_seq_item.red_op_A=ALSU_vif.red_op_A;
    34              1                       5501     rsp_seq_item.red_op_B=ALSU_vif.red_op_B;
    35              1                       5501     rsp_seq_item.bypass_A=ALSU_vif.bypass_A;
    36              1                       5501     rsp_seq_item.bypass_B=ALSU_vif.bypass_B;
    37              1                       5501     rsp_seq_item.direction=ALSU_vif.direction;
    38              1                       5501     rsp_seq_item.serial_in=ALSU_vif.serial_in;
    39              1                       5501     rsp_seq_item.leds=ALSU_vif.leds;
    40              1                       5501     rsp_seq_item.out=ALSU_vif.out;
    41              1                       5501     mon_ap.write(rsp_seq_item);
    42              1                    ***0***     `uvm_info("run_phase",rsp_seq_item.convert2string (),UVM_HIGH)
    43                                               end
    44                                                 
    45                                               endtask
    46                                               
    47                                               endclass
    48                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         2         1         1      50.0

================================Branch Details================================

Branch Coverage for file ALSU_monitor.sv --

------------------------------------IF Branch------------------------------------
    42                                      5501     Count coming in to IF
    42              1                    ***0***     `uvm_info("run_phase",rsp_seq_item.convert2string (),UVM_HIGH)
                                            5501     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_monitor.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_reset_sequence_pck.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           15         7         8      46.6

================================Statement Details================================

Statement Coverage for file ALSU_reset_sequence_pck.sv --

    1                                                package ALSU_reset_sequence_pck ;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                import ALSU_seq_item_pck::*;
    5                                                class ALSU_reset_sequence extends uvm_sequence #(ALSU_seq_item);
    6               1                    ***0***      `uvm_object_utils(ALSU_reset_sequence)
    6               2                    ***0***     
    6               3                    ***0***     
    6               4                    ***0***     
    6               5                    ***0***     
    6               6                          1     
    6               7                    ***0***     
    6               8                    ***0***     
    6               9                          1     
    6              10                    ***0***     
    7                                                ALSU_seq_item seq_item;
    8                                                
    9                                                function new (string name = "ALSU_reset_sequence");
    10              1                          1       super.new(name);
    11                                               endfunction
    12                                               
    13                                               task body;
    14              1                          1     seq_item = ALSU_seq_item::type_id::create("seq_item");
    15              1                          1     start_item(seq_item);
    16              1                          1     seq_item.rst=1'b1;
    17              1                          1     finish_item(seq_item);
    18                                               endtask
    19                                               
    20                                               endclass
    21                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         2         8      20.0

================================Branch Details================================

Branch Coverage for file ALSU_reset_sequence_pck.sv --

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               1                    ***0***      `uvm_object_utils(ALSU_reset_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               2                    ***0***      `uvm_object_utils(ALSU_reset_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               3                    ***0***      `uvm_object_utils(ALSU_reset_sequence)
    6               4                    ***0***      `uvm_object_utils(ALSU_reset_sequence)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               5                    ***0***      `uvm_object_utils(ALSU_reset_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               6                    ***0***      `uvm_object_utils(ALSU_reset_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_reset_sequence_pck.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_seq_item.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           13         3        10      23.0

================================Statement Details================================

Statement Coverage for file ALSU_seq_item.sv --

    1                                                package ALSU_seq_item_pck ;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                typedef enum bit [2:0] {OR,XOR,ADD,MULT,SHIFT,ROTATE,INVALID_6,INVALID_7} opcode_e;
    5                                                class ALSU_seq_item extends uvm_sequence_item;
    6               1                    ***0***      `uvm_object_utils(ALSU_seq_item)
    6               2                    ***0***     
    6               3                    ***0***     
    6               4                    ***0***     
    6               5                    ***0***     
    6               6                       5501     
    6               7                    ***0***     
    6               8                    ***0***     
    6               9                       5501     
    6              10                    ***0***     
    7                                                bit clk;
    8                                                rand logic signed cin;
    9                                                rand logic rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    10                                               rand opcode_e opcode;
    11                                               rand logic signed [2:0] A, B;
    12                                               logic [15:0] leds;
    13                                               logic signed [5:0] out;
    14                                               parameter MAXPOS=3,MAXNEG=-4,ZERO=0;
    15                                               rand opcode_e arr[6]; 
    16                                               
    17                                                function new (string name = "ALSU_seq_item");
    18              1                      16505       super.new(name);
    19                                                endfunction
    20                                                 
    21                                               function string convert2string ();
    22              1                    ***0***       return $sformatf("%s reset =0b%0b ,cin =0b%0b,serial_in =0b%0b,direction =0b%0b ,bypass_A =0b%0b,bypass_B =0b%0b,red_op_A =0b%0b,red_op_B =0b%0b ,opcode =0b%0b,A =0b%0b,B =0b%0b,out =0b%0b,leds =0b%0b",super.convert2string(),rst,cin,serial_in,direction,bypass_A,bypass_B,red_op_A,red_op_B,opcode,A,B,out,leds);
    23                                               endfunction
    24                                               
    25                                               function string convert2string_stimulus ();
    26              1                    ***0***       return $sformatf(" reset =0b%0b ,cin =0b%0b,serial_in =0b%0b,direction =0b%0b ,bypass_A =0b%0b,bypass_B =0b%0b,red_op_A =0b%0b,red_op_B =0b%0b ,opcode =0b%0b,A =0b%0b,B =0b%0b",rst,cin,serial_in,direction,bypass_A,bypass_B,red_op_A,red_op_B,opcode,A,B);
    27                                               endfunction
    28                                               
    29                                               ////CONSTRAINTS/////
    30                                               constraint ALSU_Cons {
    31                                               
    32                                                   //Reset to be asserted with a low probability//
    33                                                   rst dist {1:=1,0:=99};
    34                                                   
    35                                                   // bypass_A and bypass_B should be disabled most of the time //
    36                                                   bypass_A dist {1:=4,0:=96};
    37                                                   bypass_B dist {1:=4,0:=96};
    38                                                   
    39                                                   // Invalid cases should occur less frequent than the valid cases //
    40                                                   opcode dist {INVALID_6:/2,INVALID_7:/2,[0:5]:/96};
    41                                                   if( red_op_A || red_op_B ) {opcode dist{OR:/40,XOR:/40,[2:7]:/20};}
    42                                                   // in case of addition or multiplication inputs (A, B) to take the values (MAXPOS, ZERO and MAXNEG) more often than others //
    43                                                   if( opcode == ADD || opcode == MULT )
    44                                                   {
    45                                                   A dist {MAXPOS:/33,MAXNEG:/32,ZERO:/30,[-3:-1]:/3,[1:2]:/2} ;
    46                                                   B dist {MAXPOS:/33,MAXNEG:/32,ZERO:/30,[-3:-1]:/3,[1:2]:/2} ;
    47                                                   }
    48                                                   else if(opcode == OR || opcode == XOR)
    49                                                   {
    50                                                       if (red_op_A) {
    51                                                           A dist {3'b001:/30,3'b010:/30,3'b100:/30,[-3:-1]:/6,3'b011:/2,3'b000:/2} ;
    52                                                           B == 0;
    53                                                       }
    54                                                       else if (red_op_B) {
    55                                                           B dist {3'b001:/30,3'b010:/30,3'b100:/30,[-3:-1]:/6,3'b011:/2,3'b000:/2}  ;
    56                                                           A == 0;
    57                                                       }
    58                                               }
    59                                               
    60                                               }
    61                                               constraint extra
    62                                               {
    63                                                  unique{arr};
    64                                                 foreach(arr[i])
    65                                                     arr[i] dist {[OR:ROTATE]:/100};
    66                                               
    67                                               }
    68                                               
    69                                               
    70                                               
    71                                               endclass
    72                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         2         8      20.0

================================Branch Details================================

Branch Coverage for file ALSU_seq_item.sv --

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               1                    ***0***      `uvm_object_utils(ALSU_seq_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                       5501     Count coming in to IF
    6               2                    ***0***      `uvm_object_utils(ALSU_seq_item)
                                            5501     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               3                    ***0***      `uvm_object_utils(ALSU_seq_item)
    6               4                    ***0***      `uvm_object_utils(ALSU_seq_item)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                       5501     Count coming in to IF
    6               5                    ***0***      `uvm_object_utils(ALSU_seq_item)
                                            5501     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               6                    ***0***      `uvm_object_utils(ALSU_seq_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_seq_item.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_sequencer.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            4         2         2      50.0

================================Statement Details================================

Statement Coverage for file ALSU_sequencer.sv --

    1                                                package ALSU_sequencer_pck ;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                import ALSU_seq_item_pck::*;
    5                                                class ALSU_sequencer extends uvm_sequencer#(ALSU_seq_item);
    6               1                    ***0***      `uvm_component_utils(ALSU_sequencer)
    6               2                    ***0***     
    6               3                          2     
    7                                                
    8                                                function new (string name = "ALSU_sequencer",uvm_component parent =null);
    9               1                          1       super.new(name,parent);
    10                                               endfunction
    11                                               
    12                                               endclass
    13                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_sequencer.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_test.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           24        21         3      87.5

================================Statement Details================================

Statement Coverage for file ALSU_test.sv --

    1                                                package ALSU_test_pck;
    2                                                import ALSU_env_pck::*;
    3                                                import ALSU_config_pck::*;
    4                                                import ALSU_main_sequence_pck::*;
    5                                                import ALSU_reset_sequence_pck::*;
    6                                                import uvm_pkg::*;
    7                                                `include "uvm_macros.svh"
    8                                                class ALSU_test extends uvm_test;
    9                                                
    10              1                    ***0***     `uvm_component_utils(ALSU_test);
    10              2                    ***0***     
    10              3                          4     
    11                                               ALSU_env env;
    12                                               ALSU_config ALSU_cfg;
    13                                               ALSU_main_sequence_1 main_seq_1;
    14                                               ALSU_main_sequence_2 main_seq_2;
    15                                               ALSU_reset_sequence reset_seq;
    16                                               
    17                                               function new (string name = "ALSU_test",uvm_component parent =null);
    18              1                          1       super.new(name,parent);
    19                                               endfunction
    20                                               
    21                                               function void build_phase (uvm_phase phase);
    22              1                          1      super.build_phase(phase);
    23                                               
    24              1                          1      env=ALSU_env::type_id::create("env",this);
    25              1                          1      ALSU_cfg = ALSU_config::type_id::create("ALSU_cfg",this);
    26              1                          1      main_seq_1 = ALSU_main_sequence_1::type_id::create("main_seq_1",this);
    27              1                          1      main_seq_2 = ALSU_main_sequence_2::type_id::create("main_seq_2",this);
    28              1                          1      reset_seq = ALSU_reset_sequence::type_id::create("reset_seq",this);
    29                                                 if(!uvm_config_db #(virtual ALSU_if)::get(this,"","ALSU_If",ALSU_cfg.ALSU_vif)) begin
    30              1                    ***0***        `uvm_fatal("bulid_phase","Test - Unable to get the virtual interface of the shift_reg from the uvm_config_db") ;end
    31                                               
    32              1                          1      uvm_config_db #(ALSU_config)::set(this,"*","CFG",ALSU_cfg);
    33                                               endfunction
    34                                               
    35                                               task run_phase(uvm_phase phase);
    36              1                          1      super.run_phase(phase);
    37              1                          1      phase.raise_objection(this);
    38              1                          1      `uvm_info("run_phase","reset asserted",UVM_MEDIUM);
    39              1                          1       reset_seq.start(env.agt.sqr);
    40              1                          1      `uvm_info("run_phase","reset deasserted",UVM_MEDIUM);
    41              1                          1     `uvm_info("run_phase","stimulas generation 1 started",UVM_MEDIUM);
    42              1                          1       main_seq_1.start(env.agt.sqr);
    43              1                          1      `uvm_info("run_phase","stimulas generation 1 ended",UVM_MEDIUM);
    44              1                          1      `uvm_info("run_phase","stimulas generation 2 started",UVM_MEDIUM);
    45              1                          1       main_seq_2.start(env.agt.sqr);
    46              1                          1      `uvm_info("run_phase","stimulas generation 2 ended",UVM_MEDIUM);
    47              1                          1      phase.drop_objection(this);
    48                                               endtask
    49                                               
    50                                               endclass
    51                                               endpackage 

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        16         7         9      43.7

================================Branch Details================================

Branch Coverage for file ALSU_test.sv --

------------------------------------IF Branch------------------------------------
    29                                         1     Count coming in to IF
    29              1                    ***0***       if(!uvm_config_db #(virtual ALSU_if)::get(this,"","ALSU_If",ALSU_cfg.ALSU_vif)) begin
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    30                                   ***0***     Count coming in to IF
    30              1                    ***0***        `uvm_fatal("bulid_phase","Test - Unable to get the virtual interface of the shift_reg from the uvm_config_db") ;end
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    38                                         1     Count coming in to IF
    38              1                          1      `uvm_info("run_phase","reset asserted",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    40                                         1     Count coming in to IF
    40              1                          1      `uvm_info("run_phase","reset deasserted",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    41                                         1     Count coming in to IF
    41              1                          1     `uvm_info("run_phase","stimulas generation 1 started",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    43                                         1     Count coming in to IF
    43              1                          1      `uvm_info("run_phase","stimulas generation 1 ended",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    44                                         1     Count coming in to IF
    44              1                          1      `uvm_info("run_phase","stimulas generation 2 started",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    46                                         1     Count coming in to IF
    46              1                          1      `uvm_info("run_phase","stimulas generation 2 ended",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_test.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: ALSU_top.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            5         5         0     100.0

================================Statement Details================================

Statement Coverage for file ALSU_top.sv --

    1                                                import uvm_pkg::*;
    2                                                `include "uvm_macros.svh"
    3                                                import ALSU_test_pck::*;
    4                                                
    5                                                module ALSU_top();
    6                                                bit clk;
    7                                                
    8                                                initial begin
    9               1                          1     forever begin
    10              1                      11003     #1 clk=~clk;
    10              2                      11002     
    11                                               end
    12                                               end
    13                                               
    14                                               ALSU_if ALSUif (clk);
    15                                               ALSU #(ALSUif.INPUT_PRIORITY,ALSUif.FULL_ADDER) dut (.clk(clk),.rst(ALSUif.rst), .cin(ALSUif.cin), .red_op_A(ALSUif.red_op_A), .red_op_B(ALSUif.red_op_B),
    16                                                .bypass_A(ALSUif.bypass_A), .bypass_B(ALSUif.bypass_B), .direction(ALSUif.direction), .serial_in(ALSUif.serial_in),.opcode(ALSUif.opcode),.A(ALSUif.A),.B(ALSUif.B),.leds(ALSUif.leds),.out(ALSUif.out));
    17                                               /*bind ALSU ALSU_assertions #(ALSUif.INPUT_PRIORITY,ALSUif.FULL_ADDER) INIT (.clk(clk),.rst(ALSUif.rst), .cin(ALSUif.cin), .red_op_A(ALSUif.red_op_A), .red_op_B(ALSUif.red_op_B),
    18                                                .bypass_A(ALSUif.bypass_A), .bypass_B(ALSUif.bypass_B), .direction(ALSUif.direction), .serial_in(ALSUif.serial_in),.opcode(ALSUif.opcode),.A(ALSUif.A),.B(ALSUif.B),.leds(ALSUif.leds),.out(ALSUif.out));*/
    19                                               
    20                                               
    21                                               bind ALSU ALSU_assertions #(INPUT_PRIORITY,FULL_ADDER) INIT (.clk(clk),.rst(rst), .cin(cin), .red_op_A(red_op_A), .red_op_B(red_op_B),
    22                                                .bypass_A(bypass_A), .bypass_B(bypass_B), .direction(direction), .serial_in(serial_in),.opcode(opcode),.A(A),.B(B),.leds(leds),.out(out));
    23                                               initial begin
    24              1                          1     uvm_config_db #(virtual ALSU_if)::set(null,"uvm_test_top","ALSU_If",ALSUif);
    25              1                          1     run_test("ALSU_test");
    26                                               end
    27                                               endmodule
    28                                               

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      2         2         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU_top.sv --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
          6                                    clk           1           1                              100.00 

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (2 of 2 bins)

COVERGROUP COVERAGE:
-----------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal    Status               
                                                                                              
-----------------------------------------------------------------------------------------------
 TYPE /ALSU_coverage_pck/ALSU_coverage/cvr_grp         100.0%        100    Covered              
    covered/total bins:                                    33         33                      
    missing/total bins:                                     0         33                      
    % Hit:                                             100.0%        100                      
    Coverpoint cvr_grp::A_cp1                          100.0%        100    Covered              
        covered/total bins:                                 3          3                      
        missing/total bins:                                 0          3                      
        % Hit:                                         100.0%        100                      
    Coverpoint cvr_grp::A_cp2                          100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
    Coverpoint cvr_grp::B_cp1                          100.0%        100    Covered              
        covered/total bins:                                 3          3                      
        missing/total bins:                                 0          3                      
        % Hit:                                         100.0%        100                      
    Coverpoint cvr_grp::B_cp2                          100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
    Coverpoint cvr_grp::ALU_cp                         100.0%        100    Covered              
        covered/total bins:                                 7          7                      
        missing/total bins:                                 0          7                      
        % Hit:                                         100.0%        100                      
    Coverpoint cvr_grp::cin_cp                         100.0%        100    Covered              
        covered/total bins:                                 1          1                      
        missing/total bins:                                 0          1                      
        % Hit:                                         100.0%        100                      
    Coverpoint cvr_grp::serial_in_cp                   100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
    Coverpoint cvr_grp::direction_cp                   100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
    Cross cvr_grp::opcode_B                            100.0%        100    Covered              
        covered/total bins:                                 3          3                      
        missing/total bins:                                 0          3                      
        % Hit:                                         100.0%        100                      
    Cross cvr_grp::opcode_A                            100.0%        100    Covered              
        covered/total bins:                                 3          3                      
        missing/total bins:                                 0          3                      
        % Hit:                                         100.0%        100                      
    Cross cvr_grp::opcode_cin                          100.0%        100    Covered              
        covered/total bins:                                 1          1                      
        missing/total bins:                                 0          1                      
        % Hit:                                         100.0%        100                      
    Cross cvr_grp::opcode_serial                       100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
    Cross cvr_grp::opcode_direction                    100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
 CLASS ALSU_coverage
 Covergroup instance \/ALSU_coverage_pck::ALSU_coverage::cvr_grp  
                                                       100.0%        100    Covered              
    covered/total bins:                                    33         33                      
    missing/total bins:                                     0         33                      
    % Hit:                                             100.0%        100                      
    Coverpoint A_cp1                                   100.0%        100    Covered              
        covered/total bins:                                 3          3                      
        missing/total bins:                                 0          3                      
        % Hit:                                         100.0%        100                      
        bin A_data_0                                     1012          1    Covered              
        bin A_data_max                                    951          1    Covered              
        bin A_data_min                                   1089          1    Covered              
        default bin others                               2449               Occurred             
    Coverpoint A_cp2                                   100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        bin A_data_walkingones[1]                         150          1    Covered              
        bin A_data_walkingones[2]                         156          1    Covered              
    Coverpoint B_cp1                                   100.0%        100    Covered              
        covered/total bins:                                 3          3                      
        missing/total bins:                                 0          3                      
        % Hit:                                         100.0%        100                      
        bin B_data_0                                     1165          1    Covered              
        bin B_data_max                                    961          1    Covered              
        bin B_data_min                                   1028          1    Covered              
        default bin others                               2347               Occurred             
    Coverpoint B_cp2                                   100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        bin B_data_walkingones[1]                          53          1    Covered              
        bin B_data_walkingones[2]                          70          1    Covered              
    Coverpoint ALU_cp                                  100.0%        100    Covered              
        covered/total bins:                                 7          7                      
        missing/total bins:                                 0          7                      
        % Hit:                                         100.0%        100                      
        bin trans                                           1          1    Covered              
        bin shift[SHIFT]                                  904          1    Covered              
        bin shift[ROTATE]                                 920          1    Covered              
        bin arith[OR]                                     859          1    Covered              
        bin arith[XOR]                                    857          1    Covered              
        bin bitwise[ADD]                                  893          1    Covered              
        bin bitwise[MULT]                                 882          1    Covered              
    Coverpoint cin_cp                                  100.0%        100    Covered              
        covered/total bins:                                 1          1                      
        missing/total bins:                                 0          1                      
        % Hit:                                         100.0%        100                      
        bin cin_0                                        2776          1    Covered              
    Coverpoint serial_in_cp                            100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        bin serial_in_0                                  2757          1    Covered              
        bin serial_in_1                                  2743          1    Covered              
    Coverpoint direction_cp                            100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        bin direction_0                                  2728          1    Covered              
        bin direction_1                                  2772          1    Covered              
    Cross opcode_B                                     100.0%        100    Covered              
        covered/total bins:                                 3          3                      
        missing/total bins:                                 0          3                      
        % Hit:                                         100.0%        100                      
        bin op_b1                                         483          1    Covered              
        bin op_b2                                         548          1    Covered              
        bin op_b3                                         558          1    Covered              
    Cross opcode_A                                     100.0%        100    Covered              
        covered/total bins:                                 3          3                      
        missing/total bins:                                 0          3                      
        % Hit:                                         100.0%        100                      
        bin op_a1                                         507          1    Covered              
        bin op_a2                                         517          1    Covered              
        bin op_a3                                         555          1    Covered              
    Cross opcode_cin                                   100.0%        100    Covered              
        covered/total bins:                                 1          1                      
        missing/total bins:                                 0          1                      
        % Hit:                                         100.0%        100                      
        bin op_cin1                                       889          1    Covered              
    Cross opcode_serial                                100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        bin op_cin1                                       875          1    Covered              
        bin op_cin2                                       949          1    Covered              
    Cross opcode_direction                             100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        bin op_dir1                                       893          1    Covered              
        bin op_dir2                                       931          1    Covered              

TOTAL COVERGROUP COVERAGE: 100.0%  COVERGROUP TYPES: 1

DIRECTIVE COVERAGE:
---------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Count Status    
                                         Unit   UnitType                                      
---------------------------------------------------------------------------------------------
/ALSU_top/dut/INIT/bypass_a_c            ALSU_assertions Verilog  SVA  ALSU_assertions.sv(89)
                                                                                207 Covered   
/ALSU_top/dut/INIT/bypass_b_c            ALSU_assertions Verilog  SVA  ALSU_assertions.sv(92)
                                                                                195 Covered   
/ALSU_top/dut/INIT/mult_c                ALSU_assertions Verilog  SVA  ALSU_assertions.sv(95)
                                                                                249 Covered   
/ALSU_top/dut/INIT/add_c                 ALSU_assertions Verilog  SVA  ALSU_assertions.sv(98)
                                                                                254 Covered   
/ALSU_top/dut/INIT/or_a_c                ALSU_assertions Verilog  SVA  ALSU_assertions.sv(101)
                                                                                 99 Covered   
/ALSU_top/dut/INIT/or_b_c                ALSU_assertions Verilog  SVA  ALSU_assertions.sv(104)
                                                                                 41 Covered   
/ALSU_top/dut/INIT/a_or_b_c              ALSU_assertions Verilog  SVA  ALSU_assertions.sv(107)
                                                                                542 Covered   
/ALSU_top/dut/INIT/xor_a_c               ALSU_assertions Verilog  SVA  ALSU_assertions.sv(111)
                                                                                103 Covered   
/ALSU_top/dut/INIT/xor_b_c               ALSU_assertions Verilog  SVA  ALSU_assertions.sv(114)
                                                                                 38 Covered   
/ALSU_top/dut/INIT/a_xor_b_c             ALSU_assertions Verilog  SVA  ALSU_assertions.sv(117)
                                                                                530 Covered   
/ALSU_top/dut/INIT/shift_right_c         ALSU_assertions Verilog  SVA  ALSU_assertions.sv(120)
                                                                                127 Covered   
/ALSU_top/dut/INIT/shift_left_c          ALSU_assertions Verilog  SVA  ALSU_assertions.sv(123)
                                                                                132 Covered   
/ALSU_top/dut/INIT/rotate_right_c        ALSU_assertions Verilog  SVA  ALSU_assertions.sv(126)
                                                                                129 Covered   
/ALSU_top/dut/INIT/rotate_left_c         ALSU_assertions Verilog  SVA  ALSU_assertions.sv(129)
                                                                                122 Covered   
/ALSU_top/dut/INIT/invalid_1_c           ALSU_assertions Verilog  SVA  ALSU_assertions.sv(132)
                                                                                148 Covered   
/ALSU_top/dut/INIT/invalid_2_c           ALSU_assertions Verilog  SVA  ALSU_assertions.sv(135)
                                                                                984 Covered   
/ALSU_top/dut/INIT/invalid_1_leds_c      ALSU_assertions Verilog  SVA  ALSU_assertions.sv(138)
                                                                                148 Covered   
/ALSU_top/dut/INIT/invalid_2_leds_c      ALSU_assertions Verilog  SVA  ALSU_assertions.sv(141)
                                                                                984 Covered   

TOTAL DIRECTIVE COVERAGE: 100.0%  COVERS: 18

ASSERTION RESULTS:
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
/ALSU_top/dut/INIT/bypass_a_a
                     ALSU_assertions.sv(88)       0     1
/ALSU_top/dut/INIT/bypass_b_a
                     ALSU_assertions.sv(91)       0     1
/ALSU_top/dut/INIT/mult_a
                     ALSU_assertions.sv(94)       0     1
/ALSU_top/dut/INIT/add_a
                     ALSU_assertions.sv(97)       0     1
/ALSU_top/dut/INIT/or_a_a
                     ALSU_assertions.sv(100)       0     1
/ALSU_top/dut/INIT/or_b_a
                     ALSU_assertions.sv(103)       0     1
/ALSU_top/dut/INIT/a_or_b_a
                     ALSU_assertions.sv(106)       0     1
/ALSU_top/dut/INIT/xor_a_a
                     ALSU_assertions.sv(110)       0     1
/ALSU_top/dut/INIT/xor_b_a
                     ALSU_assertions.sv(113)       0     1
/ALSU_top/dut/INIT/a_xor_b_a
                     ALSU_assertions.sv(116)       0     1
/ALSU_top/dut/INIT/shift_right_a
                     ALSU_assertions.sv(119)       0     1
/ALSU_top/dut/INIT/shift_left_a
                     ALSU_assertions.sv(122)       0     1
/ALSU_top/dut/INIT/rotate_right_a
                     ALSU_assertions.sv(125)       0     1
/ALSU_top/dut/INIT/rotate_left_a
                     ALSU_assertions.sv(128)       0     1
/ALSU_top/dut/INIT/invalid_1_a
                     ALSU_assertions.sv(131)       0     1
/ALSU_top/dut/INIT/invalid_2_a
                     ALSU_assertions.sv(134)       0     1
/ALSU_top/dut/INIT/invalid_1_leds_a
                     ALSU_assertions.sv(137)       0     1
/ALSU_top/dut/INIT/invalid_2_leds_a
                     ALSU_assertions.sv(140)       0     1
/ALSU_top/dut/INIT/reset_outputs/reset_a
                     ALSU_assertions.sv(148)       0     1
/ALSU_main_sequence_pck/ALSU_main_sequence_1/body/#ublk#157479451#14/immed__19
                     ALSU_main_sequence.sv(19)       0     1
/ALSU_main_sequence_pck/ALSU_main_sequence_2/body/#anonblk#157479451#35#4#/#ublk#157479451#35/immed__43
                     ALSU_main_sequence.sv(43)       0     1

Total Coverage By File (code coverage only, filtered view): 84.7%

